////////////////////////////////////////////////////////////////////////
// Class:       MyPandoraAnalyzer
// Module Type: analyzer
// File:        MyPandoraAnalyzer_module.cc
//
// Generated at Thu Jun 23 00:24:52 2016 by Lorena Escudero Sanchez using artmod
// from cetpkgsupport v1_10_02.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"


namespace nmspc {
  class MyPandoraAnalyzer;
}

class nmspc::MyPandoraAnalyzer : public art::EDAnalyzer {
public:
  explicit MyPandoraAnalyzer(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  MyPandoraAnalyzer(MyPandoraAnalyzer const &) = delete;
  MyPandoraAnalyzer(MyPandoraAnalyzer &&) = delete;
  MyPandoraAnalyzer & operator = (MyPandoraAnalyzer const &) = delete;
  MyPandoraAnalyzer & operator = (MyPandoraAnalyzer &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;


private:

  // Declare member data here.

};


nmspc::MyPandoraAnalyzer::MyPandoraAnalyzer(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{}

void nmspc::MyPandoraAnalyzer::analyze(art::Event const & e)
{
  // Implementation of required member function here.


}

DEFINE_ART_MODULE(nmspc::MyPandoraAnalyzer)
